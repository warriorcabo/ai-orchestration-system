# gemini_connector.py
import os
import logging
import google.generativeai as genai
from google.api_core import exceptions

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class GeminiConnector:
    """Connector for Google's Gemini API"""

    def __init__(self):
        """Initialize the Gemini connector with API key"""
        # Get API key from environment variables
        self.api_key = os.environ.get("GEMINI_API_KEY")
        if not self.api_key:
            logger.warning("Gemini API key not found in environment variables")
            self.is_available = False
            return

        # Configure the Gemini API directly with the API key
        try:
            genai.configure(api_key=self.api_key)
            
            # Default model to use
            self.model_name = "gemini-pro"
            
            # Prepare the model for generation
            self.model = genai.GenerativeModel(self.model_name)
            
            # Default generation config
            self.generation_config = {
                "temperature": 0.4,
                "top_p": 0.95,
                "top_k": 40,
                "max_output_tokens": 2048,
            }
            
            self.is_available = True
            logger.info("Gemini connector initialized successfully")
        except Exception as e:
            logger.error(f"Error initializing Gemini: {str(e)}")
            self.is_available = False

    def generate_response(self, prompt, role="task_generator"):
        """Generate a response from Gemini based on the prompt and role"""
        try:
            if not self.is_available:
                return "Gemini API not available"
                
            # Generate the response
            response = self.model.generate_content(prompt)
            
            # Extract and return the text
            if response.text:
                return response.text
            
            # Return empty string if no valid response
            return "No response generated by Gemini"
        except Exception as e:
            logger.error(f"Error generating content with Gemini: {str(e)}")
            return f"Error using Gemini: {str(e)}"
            
    def generate_task(self, user_query):
        """Generate a task specification based on the user query"""
        try:
            prompt = f"""
            You are an AI Task Generator specialized in breaking down user requests into clear,
            executable tasks.
            
            User request: {user_query}
            
            Create a detailed task specification that includes:
            1. Main objective
            2. Required steps to complete the task
            3. Expected output format
            4. Any special constraints or requirements
            
            Format your response as a clear, structured task that another AI could execute.
            """
            
            return self.generate_response(prompt, role="task_generator")
        except Exception as e:
            logger.error(f"Error generating task with Gemini: {str(e)}")
            return f"Task: Process the following user request: {user_query}"
    
    def review_content(self, original_query, ai_output):
        """Review another AI's output for quality and accuracy"""
        try:
            prompt = f"""
            You are an AI Quality Reviewer with expertise in critically analyzing AI-generated content.
            
            Original user query: {original_query}
            
            AI-generated output to review:
            ---
            {ai_output}
            ---
            
            Please review this output and assess:
            1. Does it fully address the user's query?
            2. Is the information accurate and complete?
            3. Is the response well-structured and clear?
            4. Are there any errors, omissions, or improvements needed?
            
            If the output is satisfactory in all aspects, respond with just: "APPROVED"
            
            Otherwise, provide specific, actionable feedback on what should be improved.
            """
            
            return self.generate_response(prompt, role="reviewer")
        except Exception as e:
            logger.error(f"Error reviewing content with Gemini: {str(e)}")
            return "APPROVED"  # Default to approval if review fails
